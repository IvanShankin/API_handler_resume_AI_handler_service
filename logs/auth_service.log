2025-08-01 01:56:44,095 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 1, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u0421\u043c\u0438\u0440\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (123) 456-78-90, smirnov.d@mail.ru\n\u0426\u0435\u043b\u044c: \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a Python (\u0441\u0442\u0430\u0436\u0435\u0440)\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\n\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a (Frontend), \u041e\u041e\u041e \"\u0422\u0435\u0445\u043d\u043e\u0421\u0442\u0430\u0440\u0442\"\n01.2022 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u043d\u0430 React.js\n\u0412\u0435\u0440\u0441\u0442\u043a\u0430 \u043f\u043e \u043c\u0430\u043a\u0435\u0442\u0430\u043c Figma\n\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u043d\u0430 Python \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\n\u041d\u0430\u0432\u044b\u043a\u0438:\nJavaScript (ES6+), React\nHTML5, CSS3, Bootstrap\n\u0411\u0430\u0437\u043e\u0432\u044b\u0439 Python (\u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432)\nMySQL (\u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b)\nGit (\u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b)\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n\u041e\u043d\u043b\u0430\u0439\u043d-\u043a\u0443\u0440\u0441\u044b \"\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441 \u043d\u0443\u043b\u044f\", 2021 (6 \u043c\u0435\u0441\u044f\u0446\u0435\u0432)\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e:\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439: A2 (\u0431\u0430\u0437\u043e\u0432\u044b\u0439)\n\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0432 \u0448\u043a\u043e\u043b\u044c\u043d\u043e\u043c \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0435 \u043f\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e\n"}
2025-08-01 01:57:32,703 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 2, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u041f\u0435\u0442\u0440\u043e\u0432 \u0418\u0432\u0430\u043d \u0421\u0435\u0440\u0433\u0435\u0435\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (555) 123-45-67, petrov.dev@yandex.ru\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\nPython Developer, \u041e\u041e\u041e \"\u0422\u0435\u0445\u043d\u043e\u0421\u043e\u0444\u0442\"\n05.2020 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 backend \u043d\u0430 Django (DRF)\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f SQL-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (sqlite3)\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438\n\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Docker-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u0432\n\n\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b:\n\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 (Django + Celery)\nAPI \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (DRF + JWT)\n\n\u041d\u0430\u0432\u044b\u043a\u0438:\nPython (Django, DRF)\nsqlite3, Redis\nDocker, Docker-compose\nGit, Linux\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n\u041d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442, \u043c\u0430\u0433\u0438\u0441\u0442\u0440 \"\u041f\u0440\u0438\u043a\u043b\u0430\u0434\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\", 2018-2020\n"}
2025-08-01 01:59:14,234 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 1, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u0421\u043c\u0438\u0440\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (123) 456-78-90, smirnov.d@mail.ru\n\u0426\u0435\u043b\u044c: \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a Python (\u0441\u0442\u0430\u0436\u0435\u0440)\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\n\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a (Frontend), \u041e\u041e\u041e \"\u0422\u0435\u0445\u043d\u043e\u0421\u0442\u0430\u0440\u0442\"\n01.2022 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u043d\u0430 React.js\n\u0412\u0435\u0440\u0441\u0442\u043a\u0430 \u043f\u043e \u043c\u0430\u043a\u0435\u0442\u0430\u043c Figma\n\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u043d\u0430 Python \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\n\u041d\u0430\u0432\u044b\u043a\u0438:\nJavaScript (ES6+), React\nHTML5, CSS3, Bootstrap\n\u0411\u0430\u0437\u043e\u0432\u044b\u0439 Python (\u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432)\nMySQL (\u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b)\nGit (\u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b)\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n\u041e\u043d\u043b\u0430\u0439\u043d-\u043a\u0443\u0440\u0441\u044b \"\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441 \u043d\u0443\u043b\u044f\", 2021 (6 \u043c\u0435\u0441\u044f\u0446\u0435\u0432)\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e:\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439: A2 (\u0431\u0430\u0437\u043e\u0432\u044b\u0439)\n\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0432 \u0448\u043a\u043e\u043b\u044c\u043d\u043e\u043c \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0435 \u043f\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e\n"}
2025-08-01 01:59:17,930 - srt.config - INFO - Kafka new message: err: None
msg: {"success": true, "response": {"score": 14, "matches": ["Python", "MySQL"], "recommendation": "\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0438 \u043f\u043e \u043e\u043f\u044b\u0442\u0443 \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.", "verdict": "\u041d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "processing_id": 1, "user_id": 2, "requirements_id": 4, "resume_id": 3}, "message_error": null, "wait_seconds": null}
2025-08-01 01:59:18,944 - srt.config - INFO - Kafka new message: err: None
msg: {"score": 14, "matches": ["Python", "MySQL"], "recommendation": "\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0438 \u043f\u043e \u043e\u043f\u044b\u0442\u0443 \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.", "verdict": "\u041d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "processing_id": 1, "user_id": 2, "requirements_id": 4, "resume_id": 3}
2025-08-01 01:59:20,370 - srt.config - WARNING - Failed to reset consumer for topic uploading_data: KafkaError{code=_STATE,val=-172,str="Failed to seek to offset 0: Local: Erroneous state"}
2025-08-01 01:59:23,393 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 2, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u041f\u0435\u0442\u0440\u043e\u0432 \u0418\u0432\u0430\u043d \u0421\u0435\u0440\u0433\u0435\u0435\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (555) 123-45-67, petrov.dev@yandex.ru\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\nPython Developer, \u041e\u041e\u041e \"\u0422\u0435\u0445\u043d\u043e\u0421\u043e\u0444\u0442\"\n05.2020 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 backend \u043d\u0430 Django (DRF)\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f SQL-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (sqlite3)\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438\n\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Docker-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u0432\n\n\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b:\n\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 (Django + Celery)\nAPI \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (DRF + JWT)\n\n\u041d\u0430\u0432\u044b\u043a\u0438:\nPython (Django, DRF)\nsqlite3, Redis\nDocker, Docker-compose\nGit, Linux\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n\u041d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442, \u043c\u0430\u0433\u0438\u0441\u0442\u0440 \"\u041f\u0440\u0438\u043a\u043b\u0430\u0434\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\", 2018-2020\n"}
2025-08-01 01:59:26,362 - srt.config - INFO - Kafka new message: err: None
msg: {"success": true, "response": {"score": 71, "matches": ["\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442", "\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django", "\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose)", "\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API", "Redis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery)"], "recommendation": "\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0443 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439, \u043e\u0434\u043d\u0430\u043a\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u043f\u044b\u0442 \u0441 PostgreSQL/MySQL \u0438 GraphQL, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.", "verdict": "\u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "processing_id": 2, "user_id": 2, "requirements_id": 4, "resume_id": 3}, "message_error": null, "wait_seconds": null}
2025-08-01 01:59:27,372 - srt.config - INFO - Kafka new message: err: None
msg: {"score": 71, "matches": ["\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442", "\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django", "\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose)", "\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API", "Redis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery)"], "recommendation": "\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0443 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439, \u043e\u0434\u043d\u0430\u043a\u043e \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u043f\u044b\u0442 \u0441 PostgreSQL/MySQL \u0438 GraphQL, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u0442\u0440\u0435\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.", "verdict": "\u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "processing_id": 2, "user_id": 2, "requirements_id": 4, "resume_id": 3}
2025-08-01 01:59:32,508 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 3, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u0412\u043e\u043b\u043a\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (916) 999-88-77, a.volkov@career.habr\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\nSenior Python Developer, \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444\n06.2018 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0432\u044b\u0441\u043e\u043a\u043e\u043d\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 API \u043d\u0430 Django \u0438 FastAPI\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a PostgreSQL\n\u0412\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 Kubernetes \u0432 production\n\u041d\u0430\u0441\u0442\u0430\u0432\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u043e junior-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432\n\n\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nPython (Django, FastAPI, asyncio)\nPostgreSQL, Redis, Kafka\nDocker, Kubernetes, Helm\nGit, GitLab CI/CD\nPrometheus, Grafana\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\nPhD in Computer Science, MIT, 2014-2018\nMSc in Software Engineering, \u041c\u0424\u0422\u0418, 2012-2014\n\n\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438:\n3 \u0441\u0442\u0430\u0442\u044c\u0438 \u043f\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0445 \u0436\u0443\u0440\u043d\u0430\u043b\u0430\u0445\n\n\u042f\u0437\u044b\u043a\u0438:\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439: C1 (Advanced)\n"}
2025-08-01 01:59:34,353 - openai - INFO - error_code=rate_limit_exceeded error_message='Rate limit reached for gpt-4.1-mini in organization org-kU2Zljd9bqw8m2cxY2NAlxrr on tokens per min (TPM): Limit 100000, Used 100000, Requested 980. Please try again in 7h3m21.6s. Visit https://platform.openai.com/account/rate-limits to learn more. You can increase your rate limit by adding a payment method to your account at https://platform.openai.com/account/billing.' error_param=None error_type=tokens message='OpenAI API error received' stream_error=False
2025-08-01 01:59:34,353 - srt.config - WARNING - Получили rate limit как ошибку!
2025-08-01 02:01:14,306 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 1, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u0421\u043c\u0438\u0440\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (123) 456-78-90, smirnov.d@mail.ru\n\u0426\u0435\u043b\u044c: \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a Python (\u0441\u0442\u0430\u0436\u0435\u0440)\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\n\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a (Frontend), \u041e\u041e\u041e \"\u0422\u0435\u0445\u043d\u043e\u0421\u0442\u0430\u0440\u0442\"\n01.2022 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u043d\u0430 React.js\n\u0412\u0435\u0440\u0441\u0442\u043a\u0430 \u043f\u043e \u043c\u0430\u043a\u0435\u0442\u0430\u043c Figma\n\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u043d\u0430 Python \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\n\u041d\u0430\u0432\u044b\u043a\u0438:\nJavaScript (ES6+), React\nHTML5, CSS3, Bootstrap\n\u0411\u0430\u0437\u043e\u0432\u044b\u0439 Python (\u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432)\nMySQL (\u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b)\nGit (\u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b)\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n\u041e\u043d\u043b\u0430\u0439\u043d-\u043a\u0443\u0440\u0441\u044b \"\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441 \u043d\u0443\u043b\u044f\", 2021 (6 \u043c\u0435\u0441\u044f\u0446\u0435\u0432)\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e:\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439: A2 (\u0431\u0430\u0437\u043e\u0432\u044b\u0439)\n\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0432 \u0448\u043a\u043e\u043b\u044c\u043d\u043e\u043c \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0435 \u043f\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e\n"}
2025-08-01 02:01:15,214 - openai - INFO - error_code=rate_limit_exceeded error_message='Rate limit reached for gpt-4.1-mini in organization org-kU2Zljd9bqw8m2cxY2NAlxrr on tokens per min (TPM): Limit 100000, Used 100000, Requested 990. Please try again in 7h7m40.8s. Visit https://platform.openai.com/account/rate-limits to learn more. You can increase your rate limit by adding a payment method to your account at https://platform.openai.com/account/billing.' error_param=None error_type=tokens message='OpenAI API error received' stream_error=False
2025-08-01 02:01:15,214 - srt.config - WARNING - Получили rate limit как ошибку!
2025-08-01 02:02:03,871 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 2, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u041f\u0435\u0442\u0440\u043e\u0432 \u0418\u0432\u0430\u043d \u0421\u0435\u0440\u0433\u0435\u0435\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (555) 123-45-67, petrov.dev@yandex.ru\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\nPython Developer, \u041e\u041e\u041e \"\u0422\u0435\u0445\u043d\u043e\u0421\u043e\u0444\u0442\"\n05.2020 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 backend \u043d\u0430 Django (DRF)\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f SQL-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (sqlite3)\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438\n\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Docker-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u0432\n\n\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b:\n\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 (Django + Celery)\nAPI \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (DRF + JWT)\n\n\u041d\u0430\u0432\u044b\u043a\u0438:\nPython (Django, DRF)\nsqlite3, Redis\nDocker, Docker-compose\nGit, Linux\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n\u041d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442, \u043c\u0430\u0433\u0438\u0441\u0442\u0440 \"\u041f\u0440\u0438\u043a\u043b\u0430\u0434\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\", 2018-2020\n"}
2025-08-01 02:02:50,302 - srt.config - WARNING - Failed to reset consumer for topic uploading_data: KafkaError{code=_STATE,val=-172,str="Failed to seek to offset 0: Local: Erroneous state"}
2025-08-01 02:02:53,366 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 3, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u0412\u043e\u043b\u043a\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (916) 999-88-77, a.volkov@career.habr\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\nSenior Python Developer, \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444\n06.2018 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0432\u044b\u0441\u043e\u043a\u043e\u043d\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 API \u043d\u0430 Django \u0438 FastAPI\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a PostgreSQL\n\u0412\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 Kubernetes \u0432 production\n\u041d\u0430\u0441\u0442\u0430\u0432\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u043e junior-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432\n\n\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nPython (Django, FastAPI, asyncio)\nPostgreSQL, Redis, Kafka\nDocker, Kubernetes, Helm\nGit, GitLab CI/CD\nPrometheus, Grafana\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\nPhD in Computer Science, MIT, 2014-2018\nMSc in Software Engineering, \u041c\u0424\u0422\u0418, 2012-2014\n\n\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438:\n3 \u0441\u0442\u0430\u0442\u044c\u0438 \u043f\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0445 \u0436\u0443\u0440\u043d\u0430\u043b\u0430\u0445\n\n\u042f\u0437\u044b\u043a\u0438:\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439: C1 (Advanced)\n"}
2025-08-01 02:03:06,746 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 1, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u0421\u043c\u0438\u0440\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (123) 456-78-90, smirnov.d@mail.ru\n\u0426\u0435\u043b\u044c: \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a Python (\u0441\u0442\u0430\u0436\u0435\u0440)\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\n\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a (Frontend), \u041e\u041e\u041e \"\u0422\u0435\u0445\u043d\u043e\u0421\u0442\u0430\u0440\u0442\"\n01.2022 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u043d\u0430 React.js\n\u0412\u0435\u0440\u0441\u0442\u043a\u0430 \u043f\u043e \u043c\u0430\u043a\u0435\u0442\u0430\u043c Figma\n\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u043d\u0430 Python \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\n\u041d\u0430\u0432\u044b\u043a\u0438:\nJavaScript (ES6+), React\nHTML5, CSS3, Bootstrap\n\u0411\u0430\u0437\u043e\u0432\u044b\u0439 Python (\u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432)\nMySQL (\u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b)\nGit (\u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b)\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n\u041e\u043d\u043b\u0430\u0439\u043d-\u043a\u0443\u0440\u0441\u044b \"\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441 \u043d\u0443\u043b\u044f\", 2021 (6 \u043c\u0435\u0441\u044f\u0446\u0435\u0432)\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e:\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439: A2 (\u0431\u0430\u0437\u043e\u0432\u044b\u0439)\n\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0432 \u0448\u043a\u043e\u043b\u044c\u043d\u043e\u043c \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0435 \u043f\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e\n"}
2025-08-01 02:03:09,680 - srt.config - INFO - Kafka new message: err: None
msg: {"success": true, "response": {"score": 14, "matches": ["Python", "MySQL"], "recommendation": "\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0438 \u043f\u043e \u043e\u043f\u044b\u0442\u0443 \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.", "verdict": "\u041d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "processing_id": 1, "user_id": 2, "requirements_id": 4, "resume_id": 3}, "message_error": null, "wait_seconds": null}
2025-08-01 02:03:10,688 - srt.config - INFO - Kafka new message: err: None
msg: {"score": 14, "matches": ["Python", "MySQL"], "recommendation": "\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0438 \u043f\u043e \u043e\u043f\u044b\u0442\u0443 \u0438 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u044f\u043c. \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.", "verdict": "\u041d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "processing_id": 1, "user_id": 2, "requirements_id": 4, "resume_id": 3}
2025-08-01 02:03:15,920 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 2, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u041f\u0435\u0442\u0440\u043e\u0432 \u0418\u0432\u0430\u043d \u0421\u0435\u0440\u0433\u0435\u0435\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (555) 123-45-67, petrov.dev@yandex.ru\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\nPython Developer, \u041e\u041e\u041e \"\u0422\u0435\u0445\u043d\u043e\u0421\u043e\u0444\u0442\"\n05.2020 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 backend \u043d\u0430 Django (DRF)\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f SQL-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (sqlite3)\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438\n\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Docker-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u0432\n\n\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b:\n\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 (Django + Celery)\nAPI \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (DRF + JWT)\n\n\u041d\u0430\u0432\u044b\u043a\u0438:\nPython (Django, DRF)\nsqlite3, Redis\nDocker, Docker-compose\nGit, Linux\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n\u041d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442, \u043c\u0430\u0433\u0438\u0441\u0442\u0440 \"\u041f\u0440\u0438\u043a\u043b\u0430\u0434\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\", 2018-2020\n"}
2025-08-01 02:03:16,262 - openai - INFO - error_code=rate_limit_exceeded error_message='Rate limit reached for gpt-4.1-mini in organization org-kU2Zljd9bqw8m2cxY2NAlxrr on tokens per min (TPM): Limit 100000, Used 100000, Requested 953. Please try again in 6h51m41.76s. Visit https://platform.openai.com/account/rate-limits to learn more. You can increase your rate limit by adding a payment method to your account at https://platform.openai.com/account/billing.' error_param=None error_type=tokens message='OpenAI API error received' stream_error=False
2025-08-01 02:03:16,262 - srt.config - WARNING - Получили rate limit как ошибку!
2025-08-01 02:04:05,490 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 3, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u0412\u043e\u043b\u043a\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (916) 999-88-77, a.volkov@career.habr\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\nSenior Python Developer, \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444\n06.2018 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0432\u044b\u0441\u043e\u043a\u043e\u043d\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 API \u043d\u0430 Django \u0438 FastAPI\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a PostgreSQL\n\u0412\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 Kubernetes \u0432 production\n\u041d\u0430\u0441\u0442\u0430\u0432\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u043e junior-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432\n\n\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nPython (Django, FastAPI, asyncio)\nPostgreSQL, Redis, Kafka\nDocker, Kubernetes, Helm\nGit, GitLab CI/CD\nPrometheus, Grafana\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\nPhD in Computer Science, MIT, 2014-2018\nMSc in Software Engineering, \u041c\u0424\u0422\u0418, 2012-2014\n\n\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438:\n3 \u0441\u0442\u0430\u0442\u044c\u0438 \u043f\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0445 \u0436\u0443\u0440\u043d\u0430\u043b\u0430\u0445\n\n\u042f\u0437\u044b\u043a\u0438:\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439: C1 (Advanced)\n"}
2025-08-01 02:08:19,213 - srt.config - WARNING - Failed to reset consumer for topic AI_handler: KafkaError{code=_STATE,val=-172,str="Failed to seek to offset 0: Local: Erroneous state"}
2025-08-01 02:08:22,280 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 1, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u0421\u043c\u0438\u0440\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (123) 456-78-90, smirnov.d@mail.ru\n\u0426\u0435\u043b\u044c: \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a Python (\u0441\u0442\u0430\u0436\u0435\u0440)\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\n\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a (Frontend), \u041e\u041e\u041e \"\u0422\u0435\u0445\u043d\u043e\u0421\u0442\u0430\u0440\u0442\"\n01.2022 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u043d\u0430 React.js\n\u0412\u0435\u0440\u0441\u0442\u043a\u0430 \u043f\u043e \u043c\u0430\u043a\u0435\u0442\u0430\u043c Figma\n\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u043d\u0430 Python \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\n\u041d\u0430\u0432\u044b\u043a\u0438:\nJavaScript (ES6+), React\nHTML5, CSS3, Bootstrap\n\u0411\u0430\u0437\u043e\u0432\u044b\u0439 Python (\u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432)\nMySQL (\u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b)\nGit (\u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b)\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n\u041e\u043d\u043b\u0430\u0439\u043d-\u043a\u0443\u0440\u0441\u044b \"\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441 \u043d\u0443\u043b\u044f\", 2021 (6 \u043c\u0435\u0441\u044f\u0446\u0435\u0432)\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e:\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439: A2 (\u0431\u0430\u0437\u043e\u0432\u044b\u0439)\n\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0432 \u0448\u043a\u043e\u043b\u044c\u043d\u043e\u043c \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0435 \u043f\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e\n"}
2025-08-01 02:08:23,192 - openai - INFO - error_code=rate_limit_exceeded error_message='Rate limit reached for gpt-4.1-mini in organization org-kU2Zljd9bqw8m2cxY2NAlxrr on tokens per min (TPM): Limit 100000, Used 100000, Requested 990. Please try again in 7h7m40.8s. Visit https://platform.openai.com/account/rate-limits to learn more. You can increase your rate limit by adding a payment method to your account at https://platform.openai.com/account/billing.' error_param=None error_type=tokens message='OpenAI API error received' stream_error=False
2025-08-01 02:08:23,192 - srt.config - WARNING - Получили rate limit как ошибку!
2025-08-01 02:09:08,753 - srt.config - WARNING - Failed to reset consumer for topic uploading_data: KafkaError{code=_STATE,val=-172,str="Failed to seek to offset 0: Local: Erroneous state"}
2025-08-01 02:09:11,771 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 2, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u041f\u0435\u0442\u0440\u043e\u0432 \u0418\u0432\u0430\u043d \u0421\u0435\u0440\u0433\u0435\u0435\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (555) 123-45-67, petrov.dev@yandex.ru\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\nPython Developer, \u041e\u041e\u041e \"\u0422\u0435\u0445\u043d\u043e\u0421\u043e\u0444\u0442\"\n05.2020 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 backend \u043d\u0430 Django (DRF)\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f SQL-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (sqlite3)\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438\n\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Docker-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u0432\n\n\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b:\n\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 (Django + Celery)\nAPI \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (DRF + JWT)\n\n\u041d\u0430\u0432\u044b\u043a\u0438:\nPython (Django, DRF)\nsqlite3, Redis\nDocker, Docker-compose\nGit, Linux\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n\u041d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442, \u043c\u0430\u0433\u0438\u0441\u0442\u0440 \"\u041f\u0440\u0438\u043a\u043b\u0430\u0434\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\", 2018-2020\n"}
2025-08-01 02:09:33,657 - srt.config - WARNING - Failed to reset consumer for topic AI_handler: KafkaError{code=_STATE,val=-172,str="Failed to seek to offset 0: Local: Erroneous state"}
2025-08-01 02:09:36,678 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 1, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u0421\u043c\u0438\u0440\u043d\u043e\u0432 \u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (123) 456-78-90, smirnov.d@mail.ru\n\u0426\u0435\u043b\u044c: \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a Python (\u0441\u0442\u0430\u0436\u0435\u0440)\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\n\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a (Frontend), \u041e\u041e\u041e \"\u0422\u0435\u0445\u043d\u043e\u0421\u0442\u0430\u0440\u0442\"\n01.2022 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u043d\u0430 React.js\n\u0412\u0435\u0440\u0441\u0442\u043a\u0430 \u043f\u043e \u043c\u0430\u043a\u0435\u0442\u0430\u043c Figma\n\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432 \u043d\u0430 Python \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\n\n\u041d\u0430\u0432\u044b\u043a\u0438:\nJavaScript (ES6+), React\nHTML5, CSS3, Bootstrap\n\u0411\u0430\u0437\u043e\u0432\u044b\u0439 Python (\u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u0432)\nMySQL (\u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b)\nGit (\u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b)\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n\u041e\u043d\u043b\u0430\u0439\u043d-\u043a\u0443\u0440\u0441\u044b \"\u0412\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441 \u043d\u0443\u043b\u044f\", 2021 (6 \u043c\u0435\u0441\u044f\u0446\u0435\u0432)\n\n\u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e:\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439: A2 (\u0431\u0430\u0437\u043e\u0432\u044b\u0439)\n\u0423\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0432 \u0448\u043a\u043e\u043b\u044c\u043d\u043e\u043c \u0445\u0430\u043a\u0430\u0442\u043e\u043d\u0435 \u043f\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e\n"}
2025-08-01 02:09:39,481 - srt.config - INFO - Kafka new message: err: None
msg: {"success": true, "response": {"score": 0, "matches": [], "recommendation": "\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0438 \u043f\u043e \u043e\u043f\u044b\u0442\u0443 \u0438 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u043d\u0430\u0432\u044b\u043a\u0430\u043c Python backend \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.", "verdict": "\u041d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "processing_id": 1, "user_id": 2, "requirements_id": 4, "resume_id": 3}, "message_error": null, "wait_seconds": null}
2025-08-01 02:09:40,495 - srt.config - INFO - Kafka new message: err: None
msg: {"score": 0, "matches": [], "recommendation": "\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442 \u043d\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0438 \u043f\u043e \u043e\u043f\u044b\u0442\u0443 \u0438 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u043d\u0430\u0432\u044b\u043a\u0430\u043c Python backend \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c \u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f.", "verdict": "\u041d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "processing_id": 1, "user_id": 2, "requirements_id": 4, "resume_id": 3}
2025-08-01 02:09:44,945 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 2, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u041f\u0435\u0442\u0440\u043e\u0432 \u0418\u0432\u0430\u043d \u0421\u0435\u0440\u0433\u0435\u0435\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (555) 123-45-67, petrov.dev@yandex.ru\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\nPython Developer, \u041e\u041e\u041e \"\u0422\u0435\u0445\u043d\u043e\u0421\u043e\u0444\u0442\"\n05.2020 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 backend \u043d\u0430 Django (DRF)\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f SQL-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (sqlite3)\n\u0418\u043d\u0442\u0435\u0433\u0440\u0430\u0446\u0438\u044f \u0441 \u043f\u043b\u0430\u0442\u0435\u0436\u043d\u044b\u043c\u0438 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u043c\u0438\n\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 Docker-\u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u043e\u0432\n\n\u041a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b:\n\u0421\u0438\u0441\u0442\u0435\u043c\u0430 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 (Django + Celery)\nAPI \u0434\u043b\u044f \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f (DRF + JWT)\n\n\u041d\u0430\u0432\u044b\u043a\u0438:\nPython (Django, DRF)\nsqlite3, Redis\nDocker, Docker-compose\nGit, Linux\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\n\u041d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442, \u043c\u0430\u0433\u0438\u0441\u0442\u0440 \"\u041f\u0440\u0438\u043a\u043b\u0430\u0434\u043d\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0442\u0438\u043a\u0430\", 2018-2020\n"}
2025-08-01 02:09:48,103 - srt.config - INFO - Kafka new message: err: None
msg: {"success": true, "response": {"score": 71, "matches": ["\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442", "\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django", "\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose)", "\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API", "\u041e\u043f\u044b\u0442 \u0441 Redis"], "recommendation": "\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0443 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043e\u043f\u044b\u0442\u0430 \u0441 PostgreSQL/MySQL \u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f GraphQL. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435 \u043a \u043d\u0430\u0439\u043c\u0443 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u043c \u043d\u0430\u0432\u044b\u043a\u0430\u043c.", "verdict": "\u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "processing_id": 2, "user_id": 2, "requirements_id": 4, "resume_id": 3}, "message_error": null, "wait_seconds": null}
2025-08-01 02:09:49,112 - srt.config - INFO - Kafka new message: err: None
msg: {"score": 71, "matches": ["\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442", "\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django", "\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose)", "\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API", "\u041e\u043f\u044b\u0442 \u0441 Redis"], "recommendation": "\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0443 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u0439, \u0437\u0430 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043e\u043f\u044b\u0442\u0430 \u0441 PostgreSQL/MySQL \u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u044f GraphQL. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435 \u043a \u043d\u0430\u0439\u043c\u0443 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u044e\u0449\u0438\u043c \u043d\u0430\u0432\u044b\u043a\u0430\u043c.", "verdict": "\u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "processing_id": 2, "user_id": 2, "requirements_id": 4, "resume_id": 3}
2025-08-01 02:09:53,080 - srt.config - INFO - Kafka new message: err: None
msg: {"processing_id": 3, "user_id": 2, "resume_id": 3, "requirements_id": 4, "requirements": "\n\u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c: Middle Python Backend Developer\n\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430: \u043e\u0442 150 000 \u0440\u0443\u0431.\n\n\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:\n\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442.\n\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI.\n\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b).\n\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose).\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL.\n\n\u0416\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nRedis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery).\nKubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435).\n\u0417\u043d\u0430\u043d\u0438\u0435 \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pytest, unit tests).\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438).\n\n\u0427\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043c\u0438\u043d\u0443\u0441\u043e\u043c:\n\u041d\u0435\u0442 \u043e\u043f\u044b\u0442\u0430 \u0441 Docker.\n\u0422\u043e\u043b\u044c\u043a\u043e Flask (\u0431\u0435\u0437 Django/FastAPI).\n\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0431\u0430\u0437\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445.\n", "resume": "\n\u0424\u0418\u041e: \u0412\u043e\u043b\u043a\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447\n\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u044b: +7 (916) 999-88-77, a.volkov@career.habr\n\n\u041e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b:\nSenior Python Developer, \u0422\u0438\u043d\u044c\u043a\u043e\u0444\u0444\n06.2018 - \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f\n\u0410\u0440\u0445\u0438\u0442\u0435\u043a\u0442\u0443\u0440\u0430 \u0432\u044b\u0441\u043e\u043a\u043e\u043d\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432\n\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043b\u043e\u0436\u043d\u044b\u0445 API \u043d\u0430 Django \u0438 FastAPI\n\u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a PostgreSQL\n\u0412\u043d\u0435\u0434\u0440\u0435\u043d\u0438\u0435 Kubernetes \u0432 production\n\u041d\u0430\u0441\u0442\u0430\u0432\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u043e junior-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432\n\n\u0422\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043d\u0430\u0432\u044b\u043a\u0438:\nPython (Django, FastAPI, asyncio)\nPostgreSQL, Redis, Kafka\nDocker, Kubernetes, Helm\nGit, GitLab CI/CD\nPrometheus, Grafana\n\n\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435:\nPhD in Computer Science, MIT, 2014-2018\nMSc in Software Engineering, \u041c\u0424\u0422\u0418, 2012-2014\n\n\u041f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438:\n3 \u0441\u0442\u0430\u0442\u044c\u0438 \u043f\u043e \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438 \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u043c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0445 \u0436\u0443\u0440\u043d\u0430\u043b\u0430\u0445\n\n\u042f\u0437\u044b\u043a\u0438:\n\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439: C1 (Advanced)\n"}
2025-08-01 02:09:56,810 - srt.config - INFO - Kafka new message: err: None
msg: {"success": true, "response": {"score": 100, "matches": ["\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442", "\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI", "\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b)", "\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose)", "\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL", "Redis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery)", "Kubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435)", "\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438)"], "recommendation": "\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0438 \u0438 \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438.", "verdict": "\u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "processing_id": 3, "user_id": 2, "requirements_id": 4, "resume_id": 3}, "message_error": null, "wait_seconds": null}
2025-08-01 02:09:57,818 - srt.config - INFO - Kafka new message: err: None
msg: {"score": 100, "matches": ["\u041e\u043f\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043d\u0430 Python 3+ \u043e\u0442 2 \u043b\u0435\u0442", "\u0413\u043b\u0443\u0431\u043e\u043a\u0438\u0435 \u0437\u043d\u0430\u043d\u0438\u044f Django \u0438\u043b\u0438 FastAPI", "\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 PostgreSQL/MySQL (\u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0438\u043d\u0434\u0435\u043a\u0441\u044b)", "\u041e\u043f\u044b\u0442 \u0441 Docker (\u0440\u0430\u0437\u0432\u0435\u0440\u0442\u044b\u0432\u0430\u043d\u0438\u0435, compose)", "\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 REST API, GraphQL", "Redis (\u043a\u0435\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, Celery)", "Kubernetes (\u0431\u0430\u0437\u043e\u0432\u043e\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435)", "\u0410\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439 \u2014 \u0443\u0440\u043e\u0432\u0435\u043d\u044c B1+ (\u0447\u0442\u0435\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438)"], "recommendation": "\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u043c \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f\u043c \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0438 \u0438 \u043e\u0431\u043b\u0430\u0434\u0430\u0435\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0436\u0435\u043b\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438.", "verdict": "\u041f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "processing_id": 3, "user_id": 2, "requirements_id": 4, "resume_id": 3}
